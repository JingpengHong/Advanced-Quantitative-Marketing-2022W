'''Foundation of Advanced Quantitative MarketingSeesion 3:     1) Observable heterogeneity models    2) State-dependence models    3) Latent class logit model.Data: Yogurt_Data.csvAuthor: Jingpeng HongInstructor: Pradeep Chintagunta'''#################### Housekeeping ####################import osimport pandas as pdimport numpy as npimport scipy as spfrom statsmodels.discrete.conditional_models import ConditionalLogit as clos.chdir("/Users/hongjingpeng/Desktop/Quant_Mkt/Advanced-Quantitative-Marketing-2022W")###################### Preparing Data ######################## load original data ##df = pd.read_csv("Data/Yogurt_Data.csv", usecols=range(19))## reshape data from wide to long ##df.rename(columns = {'Brand  2': 'Brand 2'}, inplace = True)colname = df.columns.tolist()df2 = pd.wide_to_long(df, stubnames=["Brand", "Feature", "Price"], i=colname[0:6], j="brand", sep=" ")df2 = df2.reset_index()df2.rename(columns = {'Brand': 'choice'}, inplace = True)############################# Observed Heterogenity ############################### Median Split #### construct household characteristic data framedf_hh = df[['Pan I.D.', 'Income', 'HH Size']].drop_duplicates().reset_index()del df_hh['index']## median splitmed_size, med_income = df_hh[['HH Size', 'Income']].median()df2['upper_size'] = df2['HH Size'] > med_sizedf2['upper_income'] = df2['Income'] > med_incomedf2.loc[(df2['upper_size'] == True) & (df2['upper_income'] == True), 'group'] = 1df2.loc[(df2['upper_size'] == True) & (df2['upper_income'] == False), 'group'] = 2df2.loc[(df2['upper_size'] == False) & (df2['upper_income'] == True), 'group'] = 3df2.loc[(df2['upper_size'] == False) & (df2['upper_income'] == False), 'group'] = 4## brand dummybrand_dummy = pd.get_dummies(df2['brand'], prefix='brand')df2 = pd.concat([df2, brand_dummy], axis=1)## conditional logit estimationx = df2[['Feature', 'Price']]nJ = df2['brand'].nunique()nN = int(len(df2)/nJ)group = np.tile(np.arange(nN),nJ).reshape((nJ, nN)).Test1 = cl(endog = df2.choice.to_numpy(),           exog = x.to_numpy(),           groups = group.reshape(-1)).fit()group.reshape(-1).shape