'''Foundation of Advanced Quantitative MarketingSeesion 1: Simple LogitData: Yogurt_Data.csvAuthor: Jingpeng HongInstructor: Pradeep Chintagunta'''#################### Housekeeping ####################import osimport pandas as pdimport numpy as npimport scipy as spos.chdir("/Users/hongjingpeng/Desktop/Quant_Mkt/Advanced-Quantitative-Marketing-2022W")###################### Preparing Data ######################### load in data ###yogurt = pd.read_csv("Data/Yogurt_Data.csv", usecols=range(19))# purchase occasionyogurt['t'] = yogurt.groupby(['Pan I.D.']).cumcount()+1# reshape from the wide data to the longyogurt.set_index('Pan I.D.', 't')df = yogurt.reset_index()# price yogurt_price=pd.melt(df, id_vars=['Pan I.D.', 't'], value_vars=['Price 1', 'Price 2', 'Price 3', 'Price 4'])yogurt_price['brand']=yogurt_price['variable'].str.slice(start=-1).astype(int)yogurt_price.rename(columns={"value": "price"}, inplace=True)yogurt_price.drop(columns=['variable'], inplace=True)# brandyogurt_feature=pd.melt(df, id_vars=['Pan I.D.', 't'], value_vars=['Feature 1', 'Feature 2', 'Feature 3', 'Feature 4'])yogurt_feature['brand']=yogurt_feature['variable'].str.slice(start=-1).astype(int)yogurt_feature.rename(columns={"value": "feature"}, inplace=True)yogurt_feature.drop(columns=['variable'], inplace=True)# choiceyogurt_choice=pd.melt(df, id_vars=['Pan I.D.', 't'], value_vars=['Brand 1', 'Brand  2', 'Brand 3', 'Brand 4'])yogurt_choice['brand']=yogurt_choice['variable'].str.slice(start=-1).astype(int)yogurt_choice.rename(columns={"value": "choice"}, inplace=True)yogurt_choice.drop(columns=['variable'], inplace=True)yogurt_long=yogurt_price.merge(yogurt_feature, how='inner', on=['Pan I.D.', 't', 'brand'])yogurt_long=yogurt_long.merge(yogurt_choice, how='inner', on=['Pan I.D.', 't', 'brand'])yogurt_long.to_csv('Working_Data/yogurt_long.csv', index=False)########### MLE ############# log-likelihooddef neg_log_LL(w, *args):        '''    log-likelihood function    x: feature data, including price and feature    y: choice data    w: parameters    '''    x = args[0]    alpha1, alpha2, alpha3, bp, bf = w        ## calculate the probability    exp=np.exp(alpha1*(x['brand']==1)+alpha2*(x['brand']==2)+alpha3*(x['brand']==3)               +bp*x['price']+bf*x['feature'])    x['exp']=exp    sumexp = x.groupby(['Pan I.D.', 't'],as_index = False)['exp'].agg('sum')    sumexp.rename(columns={"exp": "sumexp"}, inplace=True)    x=x.merge(sumexp, how='inner', on=['Pan I.D.', 't'])    x['p']=x['exp']/x['sumexp']        # return the log-likelihood    return -np.sum(x['choice']*np.log(x['p']))result=sp.optimize.minimize(neg_log_LL, [0,0,0,-1,1], args=(yogurt_long), method='L-BFGS-B')coef=result.xhess_inv=result.hess_inv.todense() np.sqrt(hess_inv)## Calculate AIC and BIC ##print(result.fun)## Calculate the Cross Elasticity ##x = yogurt_longalpha1, alpha2, alpha3, bp, bf = coefexp=np.exp(alpha1*(x['brand']==1)+alpha2*(x['brand']==2)+alpha3*(x['brand']==3)               +bp*x['price']+bf*x['feature'])x['exp']=expsumexp = x.groupby(['Pan I.D.', 't'],as_index = False)['exp'].agg('sum')sumexp.rename(columns={"exp": "sumexp"}, inplace=True)x=x.merge(sumexp, how='inner', on=['Pan I.D.', 't'])x['p']=x['exp']/x['sumexp']    e = np.zeros((4,4))for j in range(1, 5):    for k in range(1, 5):        y=x        xkt = y[y.brand==k].groupby(['Pan I.D.', 't'],as_index = False)['price'].agg('mean')        xkt.rename(columns={"price": "pricek"}, inplace=True)        y=y.merge(xkt, how='left', on=['Pan I.D.', 't'])        e[j-1,-1]=-bp*np.average(y.pricek*y.p, weights=(x.brand==j))        print(e.round(3))